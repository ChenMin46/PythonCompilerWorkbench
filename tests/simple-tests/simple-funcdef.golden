def foo(a, b):
    c = a + b
    return c
===
Module
  body: [
    FunctionDef >> 'def foo(a, b)'
      name: 'foo'
      args: arguments
        args: [
          Name >> 'a'
            id: 'a'
            ctx: Param
          Name >> 'b'
            id: 'b'
            ctx: Param
        ]
        vararg: None
        kwarg: None
        defaults: [
        ]
      body: [
        Assign >> 'c = a + b'
          targets: [
            Name >> 'c'
              id: 'c'
              ctx: Store
          ]
          value: BinOp >> 'a + b'
            left: Name >> 'a'
              id: 'a'
              ctx: Load
            op: Add
            right: Name >> 'b'
              id: 'b'
              ctx: Load
        Return >> 'return c'
          value: Name >> 'c'
            id: 'c'
            ctx: Load
      ]
      decorator_list: [
      ]
  ]
