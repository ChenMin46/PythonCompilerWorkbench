def foo(a, b):
    #c = a + b
    return c
===
Module
  body: [
    FunctionDef >> 'def foo(a, b)'
      name: 'foo'
      args: arguments
        args: [
          Name >> 'a'
            id: 'a'
            ctx: Param
          Name >> 'b'
            id: 'b'
            ctx: Param
        ]
        vararg: None
        kwarg: None
        defaults: [
        ]
      body: [
        Return >> 'return c'
          value: Name >> 'c'
            id: 'c'
            ctx: Load
      ]
      decorator_list: [
      ]
  ]
--- JSON ---
{
  "contents": [
    {
      "contents": [
        {
          "contents": [
            "def foo(", 
            {
              "contents": [
                {
                  "contents": [
                    "a"
                  ], 
                  "id": "id_0", 
                  "name": "Name"
                }, 
                ", ", 
                {
                  "contents": [
                    "b"
                  ], 
                  "id": "id_0", 
                  "name": "Name"
                }
              ], 
              "id": "id_0", 
              "name": "arguments"
            }, 
            ")"
          ], 
          "id": "id_0", 
          "name": "FunctionDef"
        }, 
        ":", 
        "\n", 
        "    #c = a + b", 
        "\n", 
        "    ", 
        {
          "contents": [
            "return ", 
            {
              "contents": [
                "c"
              ], 
              "id": "id_0", 
              "name": "Name"
            }
          ], 
          "id": "id_0", 
          "name": "Return"
        }
      ], 
      "id": "id_0", 
      "name": "Module"
    }, 
    "\n"
  ], 
  "id": "id_ROOT", 
  "name": "ROOT_NODE"
}
